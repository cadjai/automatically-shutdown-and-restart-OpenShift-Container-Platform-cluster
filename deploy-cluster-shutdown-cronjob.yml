- name: ' Deploy Cluster shutdown Cron Job  | deploy-cluster-shutdown-cronjob.yml'
  hosts: localhost
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3
  vars_files:
    - 'vars/vault.yml'
    - 'vars/global.yml'
  vars:
    module: "deploy-cluster-shutdown-cron"
    ansible_name_module: "Deploy cluster shutdown Cron Job | {{ module }}"

  pre_tasks:
    - name: '{{ ansible_name_module }} | {{ openshift_cli }} whoami | check if there is valid session'
      command: >
        {{ openshift_cli }} whoami
      ignore_errors: yes
      register: existing_session

    - name: '{{ ansible_name_module }} | import_tasks | Conditional import of ocp-cluster-login role'
      import_role:
        name: ocp-cluster-login
      when:
        - existing_session.rc > 0
  tasks:
    - name: '{{ ansible_name_module }} | Create Cluster Shutdown Namespace'
      block:
        ##### Adding this to bypass restrictions on creating project with names starting with openshift  #####
        - name: '{{ ansible_name_module }} |  Create cluster-shutdown Namespace'
          command: >
            {{ openshift_cli }} create namespace '{{ cluster_shutdown_job_namespace }}'
          failed_when: "cluster_shutdown_ns_created.rc >=1 and not ' already exists' in cluster_shutdown_ns_created.stderr"
          when:
            - "'openshift' in cluster_shutdown_job_namespace"
          register: cluster_shutdown_ns_created

        - name: '{{ ansible_name_module }} |  Create cluster-shutdown Namespace'
          command: >
            {{ openshift_cli }} new-project '{{ cluster_shutdown_job_namespace }}' \
              --display-name='{{ cluster_shutdown_job_namespace_description }}' \
              --description='{{ cluster_shutdown_job_namespace_description }}'
          failed_when: "cluster_shutdown_ns_created.rc >=1 and not ' already exists' in cluster_shutdown_ns_created.stderr"
          when:
            - "not 'openshift' in cluster_shutdown_job_namespace"
          register: cluster_shutdown_ns_created

    - name: '{{ ansible_name_module }} | Get Certificate Expiration Date '
      command: >
        {{ openshift_cli }} get secret kube-apiserver-to-kubelet-signer \
         -o jsonpath='{.metadata.annotations.auth\.openshift\.io/certificate-not-after}' \
          -n openshift-kube-apiserver-operator
      register: cert_expiration_date

    - name: '{{ ansible_name_module }} | Print Certificate Expiration Date '
      debug:
        msg: "The Cluster certificate are due to expire on {{ cert_expiration_date.stdout }}. \n Ensure you restart the cluster by then"

    - name: '{{ ansible_name_module }} | Set Tomorrow Date fact'
      set_fact:
        tomorrow: "{{ lookup('pipe', ' date -d \"+ 1 days\" +%s') }}" 

    - name: '{{ ansible_name_module }} | Set Expiration date epoch fact'
      set_fact:
        cert_exp_date_epoch: "{{ lookup('pipe', ' date -d \" {{ cert_expiration_date }} \"  +%s') }}" 
      when:
        - cert_expiration_date.rc == 0
        - cert_expiration_date.stdout is defined 
        - cert_expiration_date.stdout != ''

    - name: '{{ ansible_name_module }} | Configure cluster-shutdown '
      when:
        - cert_exp_date_epoch is defined 
        - cert_exp_date_epoch >= tomorrow
      block:
        - name: '{{ ansible_name_module }} | shell | Process cluster-shutdown template'
          shell: >
            {{ openshift_cli }} process -f {{ cluster_shutdown_template_path }} \
            -p APPLICATION_NAME='{{ cluster_shutdown_service_name }}' \
            -p APPLICATION_NAMESPACE={{ cluster_shutdown_job_namespace }} \
            -p SERVICE_ACCOUNT_NAME={{ cluster_shutdown_service_account }} \
            -p CLUSTER_SHUTDOWN_IMAGE_REGISTRY_REPO='{{ cluster_shutdown_image_registry_repository }}' \
            -p CLUSTER_SHUTDOWN_IMAGE='{{ cluster_shutdown_image_name }}' \
            -p CLUSTER_SHUTDOWN_CRON_EXPRESSION='{{ cluster_shutdown_cron_expression }}' \
            -n {{ cluster_shutdown_job_namespace }} \ 
            | oc apply -f - 
          register: etccluster_shutdown_cron_created

